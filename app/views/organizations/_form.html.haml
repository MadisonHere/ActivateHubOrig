:ruby
  organization ||= raise ArgumentError, "organization is required in view partial #{__FILE__}"


- content_for :css_insert do
  = stylesheet_link_tag 'forms'

- content_for :javascript_insert do
  = javascript_include_tag 'forms'


.organization-form
  = semantic_form_for organization, :html => { :id => 'organization-form' } do |f|
    = f.inputs 'Organization Details' do
      = f.input :name
      = f.input :url, :label => 'Website'
      = f.input :description

    = f.inputs :name => 'Default Venue' do
      %li#event_venue_title_input.string.input.required.stringish
        = f.label :venue_id, 'Venue', :class => 'label'
        = text_field_tag 'venue_name', '', :class=> 'autocomplete', :value => organization.venue.present? ? organization.venue.title : params[:venue_name]
        = hidden_field(:event, :venue_id, :value => (!organization.venue.nil? ? organization.venue.id : params[:event_venue_id]))
        = image_tag 'spinner.gif', :id => 'event_venue_loading', :style => 'display: none; margin-left: 0.5em;'
        %p.inline-hints This venue will be used if none is specified for this organization's events.
        %p.inline-hints Start typing the name of a venue to search. If it doesn't exist, we'll create it for you.

    = f.inputs 'Contact Details' do
      = f.input :contact_name
      = f.input :email

    = f.inputs 'Extra Details' do
      = f.input :topics

    %li.trap
      = label 'trap', 'field', "Leave this field blank or we'll think you're a robot."
      = text_field_tag 'trap_field', params[:trap_field]

    = f.actions do
      = f.action :submit, :label => 'Preview', :button_html => { :name => 'preview' }
      = f.action :submit


:javascript
  var completed_title = '';
  $(document).ready(function(){

    // Initialize autocompletion for venues
    $("input.autocomplete").attr('autocomplete', 'off').autocomplete({
      source: #{venues_path(:format => :js).to_json.html_safe},
      minLength: 2,
      search: function(event, ui) {
        //$("#event_venue_loading").show();
        $("#event_venue_id").val('');
      },
      select: function(event, ui) {
        $('input.autocomplete').val( ui.item.title );
        $("#event_venue_id").val( ui.item.id );
        $("#event_venue_details").val( ui.item.access_notes );

        return false;
      },
      change: function(e, ui) {
        if (!ui.item) {
            $("#event_venue_id").val('');
        }
      }
    }).data( "ui-autocomplete" )._renderItem = function( ul, item ) {
      var short_address = (item.street_address && item.street_address.length > 0)
                            ? item.street_address+", "+item.locality+" "+item.region
                            : (item.address || '<span class="address-unknown">address not known</span>');
      return $( "<li><a><strong>"+item.title+"</strong><br />"+short_address+"</a></li>" )
              .data( "ui-autocomplete-item", item )
              .appendTo(ul);
    };

    // toggleable topic list using a hidden multi-select to track state
    var $topics_select = $("#organization_topic_ids").hide();
    var $topics_list = $('<div>').addClass('topics-select').insertAfter($topics_select);
    $topics_select.children('option').each(function(idx,option) {
      var $option = $(option);
      var $topic = $('<a>').addClass('topic').data('val', $option.val()).html($option.html())
      if ($option.attr('selected')) { $topic.addClass('selected'); }
      $topic.appendTo($topics_list);
      $topic.click(function() {
        $option.attr('selected', ($(this).toggleClass('selected').hasClass('selected') && 'selected'));
      });
    });
  });
