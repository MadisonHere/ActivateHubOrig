:ruby
  event ||= raise ArgumentError, "event is required in view partial #{__FILE__}"

  # initial default values for start_time and end_time rounded to upcoming hour
  event.start_time ||= Time.zone.now.beginning_of_hour + 1.hour
  event.end_time   ||= event.start_time + 1.hour


- content_for :css_insert do
  = stylesheet_link_tag 'forms'

- content_for :javascript_insert do
  = javascript_include_tag 'forms'


.event-form
  = semantic_form_for event, :html => { :id => 'event-form' } do |f|
    = f.inputs :name => 'Event Details' do
      = f.input :title, :label => 'Event Name'

      %li#event_times.input.required
        %label.label{:for => 'event_date_start'}
          When
          %abbr{:title => 'required'}> *
        .value
          = text_field_tag 'start_date', event.start_time.to_date, :id => 'event_date_start', :class => 'date_picker'
          = text_field_tag 'start_time', event.start_time.strftime('%I:%M %p'), :id => 'event_time_start', :class => 'time_picker'
          %span.to to
          = text_field_tag 'end_time', event.end_time.strftime('%I:%M %p'), :id => 'event_time_end', :class => 'time_picker'
          = text_field_tag 'end_date', event.end_time.to_date, :id => 'event_date_end', :class => 'date_picker'
          = f.semantic_errors :start_date, :start_time, :end_date, :end_time

      = f.input :organization
      = f.input :url, :label => 'Website', :hint => "Is there a website people can visit to learn more about this event?"

      %li#event_venue_title_input.string.input.required.stringish
        = f.label :venue_id, 'Venue', :class => 'label'
        = text_field_tag 'venue_name', '', :class=> 'autocomplete', :value => !event.venue.nil? ? event.venue.title : params[:venue_name]
        = hidden_field(:event, :venue_id, :value => (!event.venue.nil? ? event.venue.id : params[:event_venue_id]))
        = image_tag 'spinner.gif', :id => 'event_venue_loading', :style => 'display: none; margin-left: 0.5em;'
        %p.inline-hints Start typing the name of a venue to search. If it doesn't exist, we'll create it for you.
        = f.input :venue_details, :label => 'Venue Details', :input_html => { :rows => 4 }, :hint => "Event-specific details like the room number, or who to call to be let into the building."

      = f.input :description, :input_html => {:rows => 12, :class => 'autogrow' }, :hint => "Format text using #{link_to("Markdown", "http://www.simpleeditions.com/59001/markdown-an-introduction", :target => "_blank")} and HTML.".html_safe

    = f.inputs :name => 'Extra Details' do
      = f.input :topics
      = f.input :types

    %li.trap
      = label 'trap', 'field', "Leave this field blank or we'll think you're a robot."
      = text_field_tag 'trap_field', params[:trap_field]

    = f.actions do
      = f.action :submit, :label => 'Preview', :button_html => { :name => 'preview' }
      = f.action :submit


:javascript
  var completed_title = '';
  $(document).ready(function(){

    // Initialize autocompletion for venues
    $("input.autocomplete").attr('autocomplete', 'off').autocomplete({
      source: #{venues_path(:format => :js).to_json.html_safe},
      minLength: 2,
      search: function(event, ui) {
        //$("#event_venue_loading").show();
        $("#event_venue_id").val('');
      },
      select: function(event, ui) {
        $('input.autocomplete').val( ui.item.title );
        $("#event_venue_id").val( ui.item.id );
        $("#event_venue_details").val( ui.item.access_notes );

        return false;
      }
    }).data( "ui-autocomplete" )._renderItem = function( ul, item ) {
      var short_address = (item.street_address && item.street_address.length > 0)
                            ? item.street_address+", "+item.locality+" "+item.region
                            : (item.address || '<span class="address-unknown">address not known</span>');
      return $( "<li><a><strong>"+item.title+"</strong><br />"+short_address+"</a></li>" )
              .data( "ui-autocomplete-item", item )
              .appendTo(ul);
    };

    // Initialize date and time pickers
    $('.date_picker').datepicker({ dateFormat: 'yy-mm-dd' });
    $('.time_picker').timePicker({
      show24Hours:false,
      separator:':',
      step: 30});

    // Update "time_end" to have the same offset from "time_start" if the "time_start" changes, and displays a highlight to alert the user.
    var oldTime = $.timePicker("#event_time_start").getTime();
    $("#event_time_start").change(function() {
      if ($("#event_time_end").val()) { // Only update when second input has a value.
        // Calculate duration.
        var duration = ($.timePicker("#event_time_end").getTime() - oldTime);
        var time = $.timePicker("#event_time_start").getTime();
        // Calculate and update the time in the second input.
        $.timePicker("#event_time_end").setTime(new Date(new Date(time.getTime() + duration)));
        $('#event_time_end').effect('highlight', {}, 3000);
        oldTime = time;
      }
    });

    // Update "date_end" so that it is the same as "date_start" if "date_start" is changed to after "date_end", and displays a highlight to alert the user..
    $("#event_date_start").change(function() {
      // Only update when end value is defined.
      if ($("#event_date_end").val()) {
        // Only update when end value is before start value.
        var startDate = $.datepicker.parseDate('yy-mm-dd', $('#event_date_start').val());
        var endDate = $.datepicker.parseDate('yy-mm-dd', $('#event_date_end').val());
        if (endDate < startDate) {
          $('#event_date_end').val($('#event_date_start').val());
          $('#event_date_end').effect('highlight', {}, 3000);
        }
      }
    });

    // toggleable topic list using a hidden multi-select to track state
    var $topics_select = $("#event_topic_ids").hide();
    var $topics_list = $('<div>').addClass('topics-select').insertAfter($topics_select);
    $topics_select.children('option').each(function(idx,option) {
      var $option = $(option);
      var $topic = $('<a>').addClass('topic').data('val', $option.val()).html($option.html())
      if ($option.attr('selected')) { $topic.addClass('selected'); }
      $topic.appendTo($topics_list);
      $topic.click(function() {
        $option.attr('selected', ($(this).toggleClass('selected').hasClass('selected') && 'selected'));
      });
    });

    // toggleable type list using a hidden multi-select to track state
    var $types_select = $("#event_type_ids").hide();
    var $types_list = $('<div>').addClass('types-select').insertAfter($types_select);
    $types_select.children('option').each(function(idx,option) {
      var $option = $(option);
      var $type = $('<a>').addClass('type').data('val', $option.val()).html($option.html())
      if ($option.attr('selected')) { $type.addClass('selected'); }
      $type.appendTo($types_list);
      $type.click(function() {
        $option.attr('selected', ($(this).toggleClass('selected').hasClass('selected') && 'selected'));
      });
    });
  });
